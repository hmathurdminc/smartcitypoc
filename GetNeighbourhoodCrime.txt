#r "Microsoft.WindowsAzure.Storage"
#r "Newtonsoft.Json"
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Table;
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using Newtonsoft.Json;
using System.Collections.Generic;


public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log)
{   try
    {
        string startDate;
        string endDate;
        string neighbourhoodID;
    
        neighbourhoodID = req.GetQueryNameValuePairs()
        .FirstOrDefault(q => string.Compare(q.Key, "neighbourhoodID", true) == 0)
        .Value;
          startDate = req.GetQueryNameValuePairs()
        .FirstOrDefault(q => string.Compare(q.Key, "startDate", true) == 0)
        .Value;
          endDate = req.GetQueryNameValuePairs()
        .FirstOrDefault(q => string.Compare(q.Key, "endDate", true) == 0)
        .Value;


        CloudStorageAccount storageAccount =
             CloudStorageAccount.Parse("DefaultEndpointsProtocol=https;AccountName=inspectioncompub022;AccountKey=ommia/JaURQPrmwORF6ZlNrHS+cfj/qN3jtLAQE8Ut/uCAt30Gl4rx1QK3E/afcgWGbS7UZiTJPYLqPBYWbNRQ==;EndpointSuffix=core.windows.net");
            CloudTableClient tableClient = storageAccount.CreateCloudTableClient();
            CloudTable table = tableClient.GetTableReference("Crime");
            string filter = string.Empty;
            if (!string.IsNullOrEmpty(neighbourhoodID))
            {
                filter = "(PartitionKey eq 'athmar-park') and (RowKey ge '" + startDate + "' and RowKey lt '" + endDate + "') and (NEIGHBORHOOD_ID eq '" + neighbourhoodID + "')";
            }
            else
            {

                filter = "(PartitionKey eq 'athmar-park') and (RowKey ge '" + startDate + "' and RowKey lt '" + endDate + "')";
            }
            TableQuery<CrimeDTO> query = new TableQuery<CrimeDTO>().Where(filter);
 log.Info("FILTER: " + filter);
            List<CrimeDTO> dto = new List<CrimeDTO>();

            foreach (CrimeDTO entity in table.ExecuteQuery(query))
            {
                CrimeDTO item = new CrimeDTO();
                item.DISTRICT_ID = entity.DISTRICT_ID;
                item.FIRST_OCCURRENCE_DATE = entity.FIRST_OCCURRENCE_DATE;
                item.GEO_LAT = entity.GEO_LAT;
                item.GEO_LON = entity.GEO_LON;
                item.GEO_X = entity.GEO_X;
                item.GEO_Y = entity.GEO_Y;
                item.INCIDENT_ADDRESS = entity.INCIDENT_ADDRESS;
                item.INCIDENT_ID = entity.INCIDENT_ID;
                item.IS_CRIME = entity.IS_CRIME;
                item.IS_TRAFFIC = entity.IS_TRAFFIC;
                item.LAST_OCCURRENCE_DATE = entity.LAST_OCCURRENCE_DATE;
                item.NEIGHBORHOOD_ID = entity.NEIGHBORHOOD_ID;
                item.OFFENSE_CATEGORY_ID = entity.OFFENSE_CATEGORY_ID;
                item.OFFENSE_CODE = entity.OFFENSE_CODE;
                item.OFFENSE_CODE_EXTENSION = entity.OFFENSE_CODE_EXTENSION;
                item.OFFENSE_ID = entity.OFFENSE_ID;
                item.OFFENSE_TYPE_ID = entity.OFFENSE_TYPE_ID;
                item.PRECINCT_ID = entity.PRECINCT_ID;
                item.REPORTED_DATE = entity.REPORTED_DATE;
                dto.Add(item);
            }
      

        if (dto != null && dto.Count > 0)
        {
            var jsonToReturn = JsonConvert.SerializeObject(dto);

            return new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonToReturn, Encoding.UTF8, "application/json")
            };
        }
        else
        {
            return new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent("No Data Available", Encoding.UTF8, "application/json")
            };
        }
    }
    catch (Exception ex)
    {
        return new HttpResponseMessage(HttpStatusCode.InternalServerError)
        {
            Content = new StringContent(ex.Message, Encoding.UTF8, "application/json")
        };
    }
}



 public class CrimeDTO : TableEntity
    {
        public int DISTRICT_ID { get; set; }
        public DateTime FIRST_OCCURRENCE_DATE { get; set; }
        public double GEO_LAT { get; set; }
        public double GEO_LON { get; set; }
        public int GEO_X { get; set; }
        public int GEO_Y { get; set; }
        public string INCIDENT_ADDRESS { get; set; }
        public int INCIDENT_ID { get; set; }
        public int IS_CRIME { get; set; }
        public int IS_TRAFFIC { get; set; }
        public DateTime LAST_OCCURRENCE_DATE { get; set; }
        public string NEIGHBORHOOD_ID { get; set; }
        public string OFFENSE_CATEGORY_ID { get; set; }
        public int OFFENSE_CODE { get; set; }
        public int OFFENSE_CODE_EXTENSION { get; set; }
        public int OFFENSE_ID { get; set; }
        public string OFFENSE_TYPE_ID { get; set; }
        public int PRECINCT_ID { get; set; }
        public DateTime REPORTED_DATE { get; set; }
    }